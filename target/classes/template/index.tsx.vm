import React, { useState, useRef } from 'react';
import { Button, message, Drawer } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import { PageContainer, FooterToolbar } from '@ant-design/pro-layout';
import type { ProColumns, ActionType } from '@ant-design/pro-table';
import ProTable from '@ant-design/pro-table';
import type { ProDescriptionsItemProps } from '@ant-design/pro-descriptions';
import ProDescriptions from '@ant-design/pro-descriptions';
import { ModalForm, ProFormText, ProFormTextArea } from '@ant-design/pro-form';
import type { FormValueType } from './components/UpdateForm';
import UpdateForm from './components/UpdateForm';
import type { ${className}, ${className}Pagination } from './data';
import { page, add, update, remove } from './service';

/**
 * 添加
 *
 * @param fields
 */
const handleAdd = async (fields: ${className}) => {
  const hide = message.loading('正在添加');

  try {
    await add({ ...fields });
    hide();
    message.success('添加成功');
    return true;
  } catch (error) {
    hide();
    message.error('添加失败请重试！');
    return false;
  }
};

/**
 * 修改
 *
 * @param fields
 */
const handleUpdate = async (fields: FormValueType, currentRow?: ${className}) => {
  const hide = message.loading('正在修改');

  try {
    await update({
        ...currentRow,
        ...fields,
    });
    hide();
    message.success('修改成功');
    return true;
  } catch (error) {
    hide();
    message.error('修改失败请重试！');
    return false;
  }
};

/**
 * 删除
 *
 * @param selectedRows
 */
const handleRemove = async (selectedRows: ${className}[]) => {
  const hide = message.loading('正在删除');
  if (!selectedRows) return true;

  try {
    await remove({
        key: selectedRows.map((row) => row.${pk.columnName}),
    });
    hide();
    message.success('删除成功，即将刷新');
    return true;
  } catch (error) {
    hide();
    message.error('删除失败，请重试');
    return false;
  }
};

const ${className}TableList: React.FC = () => {
  /** 新建窗口的弹窗 */
  const [createModalVisible, handleCreateModalVisible] = useState<boolean>(false);
  /** 修改窗口的弹窗 */
  const [updateModalVisible, handleUpdateModalVisible] = useState<boolean>(false);
  /** 呈现明细 */
  const [showDetailDrawerVisible, handleShowDetailDrawerVisible] = useState<boolean>(false);
  /** 操作Ref对象 */
  const actionRef = useRef<ActionType>();
  /** 当前选中行 */
  const [currentRow, setCurrentRow] = useState<${className}>();
  /** 选中行列表 */
  const [selectedRows, setSelectedRows] = useState<${className}[]>([]);
  /** 国际化配置 */

  const columns: ProColumns<${className}>[] = [
    #foreach ($column in $columns)
    { title: '$column.comments', width: 120, search: false, dataIndex: '$column.attrname', key: '$column.attrname' },
    #end
    { title: '操作', dataIndex: 'option', valueType: 'option',
    render: (_, record) => [
      <a key="config"
      onClick={() => {
        handleUpdateModalVisible(true);
        setCurrentRow(record);
      }}>配置</a>,
      ],
    },
  ];

  return (
    <PageContainer>
      <ProTable<${className}, ${className}Pagination>
        headerTitle="查询表格"
        actionRef={actionRef}
        rowKey="${pk.columnName}"
        search={{
          labelWidth: 120,
        }}
        toolBarRender={() => [
          <Button type="primary" key="primary"
          onClick={() => {
              handleCreateModalVisible(true);
          }} ><PlusOutlined /> 新建 </Button>,
        ]}
        request={page}
        columns={columns}
        rowSelection={{
          onChange: (_, _selectedRows) => {
            setSelectedRows(_selectedRows);
          },
        }}
      />
    {selectedRows?.length > 0 && (
      <FooterToolbar extra={
        <div> 已选择{' '}
        <a style={{ fontWeight: 600, }} > {selectedRows.length} </a>{' '}项
        </div>
      }>
        <Button onClick={async () => {
          await handleRemove(selectedRows);
          setSelectedRows([]);
          actionRef.current?.reloadAndRest?.();
        }}> 批量删除 </Button>
      </FooterToolbar>
    )}

  <ModalForm title="新建" width="400px"
    visible={createModalVisible}
    onVisibleChange={handleCreateModalVisible}
    onFinish={async (value) => {
      const success = await handleAdd(value as ${className});
      if (success) {
        handleCreateModalVisible(false);
        if (actionRef.current) {
            actionRef.current.reload();
        }
      }
    }}
  >
  <ProFormText
  rules={[{
    required: true,
    message: '名称为必填项',
  },]}
  width="md"
  name="name" />

  <ProFormTextArea width="md" name="desc" />
  </ModalForm>

  <UpdateForm
    onSubmit={async (value) => {
      const success = await handleUpdate(value, currentRow);
      if (success) {
        handleUpdateModalVisible(false);
        setCurrentRow(undefined);

        if (actionRef.current) {
            actionRef.current.reload();
        }
      }
    }}
    onCancel={() => {
      handleUpdateModalVisible(false);
      setCurrentRow(undefined);
    }}
    updateModalVisible={updateModalVisible}
    values={currentRow || {}}
  />

  <Drawer
    width={600}
    visible={showDetailDrawerVisible}
    onClose={() => {
      setCurrentRow(undefined);
      handleShowDetailDrawerVisible(false);
    }}
    closable={false}
  >
  {currentRow?.name && (
    <ProDescriptions<${className}>
    column={2}
    title={currentRow?.name}
    request={async () => ({
      data: currentRow || {},
    })}
    params={{
      id: currentRow?.name,
    }}
    columns={columns as ProDescriptionsItemProps<${className}>[]}
    />
  )}
  </Drawer>
  </PageContainer>
  );
};

export default ${className}TableList;
